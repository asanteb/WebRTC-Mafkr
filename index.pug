doctype html
html(lang='en')
  head
    title
    link(rel='stylesheet', href='//cdn.webrtc-experiment.com/style.css')
    style.
      audio,
      video {
      -moz-transition: all 1s ease;
      -ms-transition: all 1s ease;
      -o-transition: all 1s ease;
      -webkit-transition: all 1s ease;
      transition: all 1s ease;
      vertical-align: top;
      }
    // scripts used for WebRTC connections
    script(src='//cdn.webrtc-experiment.com/RTCMultiConnection.js')
    script(src='//cdn.webrtc-experiment.com/firebase.js')
  style.
    #videos {
    width: 100vw;
    height: 100vh;
    background: white;
    }
    * {
    margin: 0;
    padding: -0.02px 0;
    }
    figure, video {
    width: 48vw;
    height: 48vh;
    float: left;
    display: block;
    margin: 1vh 1vw;
    background: #bada55;
    }
    figure:after {
    height: 0;
    clear: both;
    font-size: 0;
    content: " ";
    display: block;
    visibility: hidden;
    }
  body
    select
      option Broadcaster
      option Anonymous Viewer
      option Room Moderator
    button Continue
    #videos
      //
        <figure>
        <figcaption></figcaption>
        </figure>
        <figure>
        <figcaption></figcaption>
        </figure>
        <figure>
        <figcaption></figcaption>
        </figure>
        --!>
        <figure>
        <figcaption></figcaption>
        </figure>
        </div>
        <script>
        var select = document.querySelector('select');
        var button = document.querySelector('button');
        var videos = document.querySelector('#videos');
        button.onclick = function() {
        this.disabled = true;
        var role = select.value;
        window.connection = new RTCMultiConnection();
        // dont-override-session allows you force RTCMultiConnection
        // to not override default session of participants;
        // by default, session is always overridden and set to the session coming from initiator!
        connection.dontOverrideSession = true;
        connection.session = {
        audio: true,
        video: true,
        oneway: role == 'Anonymous Viewer'
        };
        connection.onstream = function(e) {
        videos.appendChild(e.mediaElement);
        if (e.type == 'remote') {
        // because "viewer" joined room as "oneway:true"
        // initiator will NEVER share participants
        // to manually ask for participants;
        // call "askToShareParticipants" method.
        connection.askToShareParticipants();
        }
        // if you're moderator
        // if stream-type is 'remote'
        // if target user is broadcaster!
        if (connection.isInitiator && e.type == 'remote' && !e.session.oneway) {
        // call "shareParticipants" to manually share participants with all connected users!
        connection.shareParticipants({
        dontShareWith: e.userid
        });
        }
        };
        connection.onNewSession = function(session) {
        if (role == 'Anonymous Viewer') {
        session.join({
        oneway: true
        });
        }
        if (role == 'Broadcaster') {
        session.join();
        }
        };
        if (role == 'Room Moderator')
        connection.open({
        sessionid: connection.channel,
        captureUserMediaOnDemand: false
        });
        else
        connection.connect(connection.channel);
        };
        </script>
        </body>
        </html>
